
hello_world:     file format mach-o-x86-64


Disassembly of section .text:

0000000100000ec0 <_main>:
   100000ec0:   55                      push   %rbp
   100000ec1:   48 89 e5                mov    %rsp,%rbp
   100000ec4:   48 83 ec 30             sub    $0x30,%rsp
   100000ec8:   48 8d 05 a7 00 00 00    lea    0xa7(%rip),%rax        # 100000f76 <_main+0xb6>
   100000ecf:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)        # 
   100000ed6:   89 7d f8                mov    %edi,-0x8(%rbp)        # argc = %edi
   100000ed9:   48 89 75 f0             mov    %rsi,-0x10(%rbp)       # argv = %rsi 
   100000edd:   c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%rbp)       # i = 0 
   100000ee4:   48 89 c7                mov    %rax,%rdi
   100000ee7:   b0 00                   mov    $0x0,%al
   100000ee9:   e8 68 00 00 00          callq  100000f56 <_main+0x96> # print %edi
   100000eee:   48 8d 3d 8f 00 00 00    lea    0x8f(%rip),%rdi        # 100000f84 <_main+0xc4>
   100000ef5:   8b 75 f8                mov    -0x8(%rbp),%esi
   100000ef8:   89 45 e8                mov    %eax,-0x18(%rbp)
   100000efb:   b0 00                   mov    $0x0,%al
   100000efd:   e8 54 00 00 00          callq  100000f56 <_main+0x96>
   100000f02:   48 8d 3d 8f 00 00 00    lea    0x8f(%rip),%rdi        # 100000f98 <_main+0xd8>
   100000f09:   89 45 e4                mov    %eax,-0x1c(%rbp)
   100000f0c:   b0 00                   mov    $0x0,%al
   100000f0e:   e8 43 00 00 00          callq  100000f56 <_main+0x96>
   100000f13:   89 45 e0                mov    %eax,-0x20(%rbp)
   100000f16:   8b 45 ec                mov    -0x14(%rbp),%eax
   100000f19:   3b 45 f8                cmp    -0x8(%rbp),%eax
   100000f1c:   0f 8d 2b 00 00 00       jge    100000f4d <_main+0x8d>
   100000f22:   48 8d 3d 7b 00 00 00    lea    0x7b(%rip),%rdi        # 100000fa4 <_main+0xe4>
   100000f29:   48 63 45 ec             movslq -0x14(%rbp),%rax
   100000f2d:   48 8b 4d f0             mov    -0x10(%rbp),%rcx
   100000f31:   48 8b 34 c1             mov    (%rcx,%rax,8),%rsi
   100000f35:   b0 00                   mov    $0x0,%al
   100000f37:   e8 1a 00 00 00          callq  100000f56 <_main+0x96>
   100000f3c:   8b 55 ec                mov    -0x14(%rbp),%edx
   100000f3f:   83 c2 01                add    $0x1,%edx
   100000f42:   89 55 ec                mov    %edx,-0x14(%rbp)
   100000f45:   89 45 dc                mov    %eax,-0x24(%rbp)
   100000f48:   e9 c9 ff ff ff          jmpq   100000f16 <_main+0x56>
   100000f4d:   31 c0                   xor    %eax,%eax
   100000f4f:   48 83 c4 30             add    $0x30,%rsp
   100000f53:   5d                      pop    %rbp
   100000f54:   c3                      retq   

Disassembly of section __TEXT.__stubs:
# printf

0000000100000f56 <__TEXT.__stubs>:
   100000f56:   ff 25 b4 00 00 00       jmpq   *0xb4(%rip)        # 100001010 <_main+0x150>

Disassembly of section __TEXT.__stub_helper:

0000000100000f5c <__TEXT.__stub_helper>:
   100000f5c:   4c 8d 1d a5 00 00 00    lea    0xa5(%rip),%r11        # 100001008 <_main+0x148>
   100000f63:   41 53                   push   %r11
   100000f65:   ff 25 95 00 00 00       jmpq   *0x95(%rip)        # 100001000 <_main+0x140>
   100000f6b:   90                      nop
   100000f6c:   68 00 00 00 00          pushq  $0x0
   100000f71:   e9 e6 ff ff ff          jmpq   100000f5c <_main+0x9c>

Disassembly of section .cstring:

0000000100000f76 <.cstring>:
   100000f76:                   
   (basically a string that objdump is trying to interpret as commands, so trash)

Disassembly of section __TEXT.__unwind_info:

0000000100000fac <__TEXT.__unwind_info>:
   100000fac:   01 00                   add    %eax,(%rax)
   100000fae:   00 00                   add    %al,(%rax)
   100000fb0:   1c 00                   sbb    $0x0,%al
   100000fb2:   00 00                   add    %al,(%rax)
   100000fb4:   00 00                   add    %al,(%rax)
   100000fb6:   00 00                   add    %al,(%rax)
   100000fb8:   1c 00                   sbb    $0x0,%al
   100000fba:   00 00                   add    %al,(%rax)
   100000fbc:   00 00                   add    %al,(%rax)
   100000fbe:   00 00                   add    %al,(%rax)
   100000fc0:   1c 00                   sbb    $0x0,%al
   100000fc2:   00 00                   add    %al,(%rax)
   100000fc4:   02 00                   add    (%rax),%al
   100000fc6:   00 00                   add    %al,(%rax)
   100000fc8:   c0 0e 00                rorb   $0x0,(%rsi)
   100000fcb:   00 34 00                add    %dh,(%rax,%rax,1)
   100000fce:   00 00                   add    %al,(%rax)
   100000fd0:   34 00                   xor    $0x0,%al
   100000fd2:   00 00                   add    %al,(%rax)
   100000fd4:   56                      push   %rsi
   100000fd5:   0f 00 00                sldt   (%rax)
   100000fd8:   00 00                   add    %al,(%rax)
   100000fda:   00 00                   add    %al,(%rax)
   100000fdc:   34 00                   xor    $0x0,%al
   100000fde:   00 00                   add    %al,(%rax)
   100000fe0:   03 00                   add    (%rax),%eax
   100000fe2:   00 00                   add    %al,(%rax)
   100000fe4:   0c 00                   or     $0x0,%al
   100000fe6:   01 00                   add    %eax,(%rax)
   100000fe8:   10 00                   adc    %al,(%rax)
   100000fea:   01 00                   add    %eax,(%rax)
   100000fec:   00 00                   add    %al,(%rax)
   100000fee:   00 00                   add    %al,(%rax)
   100000ff0:   00 00                   add    %al,(%rax)
   100000ff2:   00 01                   add    %al,(%rcx)

Disassembly of section __DATA.__nl_symbol_ptr:

0000000100001000 <__DATA.__nl_symbol_ptr>:
    ...

Disassembly of section __DATA.__la_symbol_ptr:

0000000100001010 <__DATA.__la_symbol_ptr>:
   100001010:   6c                      insb   (%dx),%es:(%rdi)
   100001011:   0f 00 00                sldt   (%rax)
   100001014:   01 00                   add    %eax,(%rax)
    ...






pwd_objdump

   main:
        Initially set the base and stack pointers
            400616:   55                      push   %rbp
            400617:   48 89 e5                mov    %rsp,%rbp
            40061a:   48 81 ec 30 01 00 00    sub    $0x130,%rsp

        Put %edi into var_124
            400621:   89 bd dc fe ff ff       mov    %edi,-0x124(%rbp)
        Put %rsi into var_130
            400627:   48 89 b5 d0 fe ff ff    mov    %rsi,-0x130(%rbp)

        Move all four qwords (8 bytes) of the password into -0x20(%rbp), variable name s2
            40062e:   48 8b 05 13 01 00 00    mov    0x113(%rip),%rax        
                # 400748 <gets@plt+0x288>
            400635:   48 89 45 e0             mov    %rax,-0x20(%rbp)
            400639:   48 8b 05 10 01 00 00    mov    0x110(%rip),%rax        
                # 400750 <gets@plt+0x290>
            400640:   48 89 45 e8             mov    %rax,-0x18(%rbp)
            400644:   48 8b 05 0d 01 00 00    mov    0x10d(%rip),%rax        
                # 400758 <gets@plt+0x298>
            40064b:   48 89 45 f0             mov    %rax,-0x10(%rbp)
            40064f:   8b 05 0b 01 00 00       mov    0x10b(%rip),%eax        
                # 400760 <gets@plt+0x2a0>
            400655:   89 45 f8                mov    %eax,-0x8(%rbp)
        And store the password's address in %rax
            400658:   48 8d 45 e0             lea    -0x20(%rbp),%rax

        %esi = 0x 00 00 00 1C
            40065c:   be 1c 00 00 00          mov    $0x1c,%esi

        *****Put the password's address into %rdi and call 4005BD*****
            400661:   48 89 c7                mov    %rax,%rdi
            400664:   e8 54 ff ff ff          callq  4005bd <gets@plt+0xfd>

        Ask user for the password
        puts "Enter the password: "
            400669:   bf 67 07 40 00          mov    $0x400767,%edi
            40066e:   e8 1d fe ff ff          callq  400490 <puts@plt>
        -0x120(%rbp) is the address of where s1 is stored
            400673:   48 8d 85 e0 fe ff ff    lea    -0x120(%rbp),%rax
            40067a:   48 89 c7                mov    %rax,%rdi
        gets what the user entered
            40067d:   e8 3e fe ff ff          callq  4004c0 <gets@plt>
            400682:   48 8d 4d e0             lea    -0x20(%rbp),%rcx
            400686:   48 8d 85 e0 fe ff ff    lea    -0x120(%rbp),%rax

        n
            40068d:   ba 1c 00 00 00          mov    $0x1c,%edx
        s2
            400692:   48 89 ce                mov    %rcx,%rsi
        s1
            400695:   48 89 c7                mov    %rax,%rdi

        Compare passwords
        Call _strncmp
            400698:   e8 e3 fd ff ff          callq  400480 <strncmp@plt>
            40069d:   85 c0                   test   %eax,%eax
            40069f:   75 0c                   jne    4006ad <gets@plt+0x1ed>

        If equal, then the correct password was entered
            4006a1:   bf 7c 07 40 00          mov    $0x40077c,%edi
            4006a6:   e8 e5 fd ff ff          callq  400490 <puts@plt>
            4006ab:   eb 0a                   jmp    4006b7 <gets@plt+0x1f7>

        Else, it was not correct
            4006ad:   bf 91 07 40 00          mov    $0x400791,%edi
            4006b2:   e8 d9 fd ff ff          callq  400490 <puts@plt>

        End of main cleanup
            4006b7:   b8 00 00 00 00          mov    $0x0,%eax
            4006bc:   c9                      leaveq 
            4006bd:   c3                      retq   



    - Password decryption routine:
        sub_4005BD
        Remember that this is in little endian!  most significant byte is to the right

        Initially set base and stack pointers
            4005bd:   55                      push   %rbp
            4005be:   48 89 e5                mov    %rsp,%rbp

        Move pw address into var_18
            4005c1:   48 89 7d e8             mov    %rdi,-0x18(%rbp)

        Move 0x1c00..........0xxxxxxff into -0x1c(%rbp) and 0x0 into -0x8(%rbp)
        1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01
        1c 00 00 00 pp pp pp pp pp pp pp pp .. .. .. .. .. .. .. bi 00 00 00 00 .. .. .. ff
            4005c5:   89 75 e4                mov    %esi,-0x1c(%rbp)
            4005c8:   c6 45 ff ff             movb   $0xff,-0x1(%rbp)
            4005cc:   c7 45 f8 00 00 00 00    movl   $0x0,-0x8(%rbp)
            4005d3:   eb 37                   jmp    40060c <gets@plt+0x14c>

        Loop start
          Take index of 0x8, i, into pw, putting that address into %rax
            4005d5:   8b 55 f8                mov    -0x8(%rbp),%edx
            4005d8:   48 8b 45 e8             mov    -0x18(%rbp),%rax
            4005dc:   48 01 d0                add    %rdx,%rax

          Take ith-least-significant byte of pw (at (%rax)) and move it into %eax, 
          zero-padding it: 
          %eax = 00 00 00 b1
            4005df:   0f b6 00                movzbl (%rax),%eax
          Then copy into -0x9(%rbp)
            4005e2:   88 45 f7                mov    %al,-0x9(%rbp)

          Put $(pw_addr)+i into %rdx again, and also %rax
            4005e5:   8b 55 f8                mov    -0x8(%rbp),%edx
            4005e8:   48 8b 45 e8             mov    -0x18(%rbp),%rax
            4005ec:   48 01 c2                add    %rax,%rdx

            4005ef:   8b 4d f8                mov    -0x8(%rbp),%ecx
            4005f2:   48 8b 45 e8             mov    -0x18(%rbp),%rax
            4005f6:   48 01 c8                add    %rcx,%rax
          Put ith byte of pw in %rax, zero-padded
            4005f9:   0f b6 00                movzbl (%rax),%eax

          Bitwise maskflip the ith byte
            4005fc:   32 45 ff                xor    -0x1(%rbp),%al
          Replace s2 (the stored pw)'s ith byte with the flipped version
            4005ff:   88 02                   mov    %al,(%rdx)
          Original ith byte becomes the new mask and is added to index i
            400601:   0f b6 45 f7             movzbl -0x9(%rbp),%eax
            400605:   88 45 ff                mov    %al,-0x1(%rbp)
            400608:   83 45 f8 01             addl   $0x1,-0x8(%rbp)

          Compare 0x8 to 0x1c
            40060c:   8b 45 f8                mov    -0x8(%rbp),%eax
            40060f:   3b 45 e4                cmp    -0x1c(%rbp),%eax
          JB: jump short if below (CF=1)
            400612:   72 c1                   jb     4005d5 <gets@plt+0x115>

        End of sub_4005BD
            400614:   5d                      pop    %rbp
            400615:   c3                      retq   